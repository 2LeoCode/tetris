/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   shape.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: Leo Suardi <lsuardi@student.42.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/04/02 00:03:24 by Leo Suardi        #+#    #+#             */
/*   Updated: 2022/04/07 12:13:25 by Leo Suardi       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "shape.hpp"

namespace tetris {

	const uint8_t	shape::m_data[112][5] {
		// SHAPE 0

		{ 0,	0,	0,	0 },
		{ 12,	12,	0,	0 },
		{ 12,	0,	0,	0 },
		{ 12,	0,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 12,	0,	0,	0 },
		{ 12,	12,	12,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	12,	0,	0 },
		{ 0,	12,	0,	0 },
		{ 12,	12,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 12,	12,	12,	0 },
		{ 0,	0,	12,	0 },


		// SHAPE 1

		{ 0,	0,	0,	0 },
		{ 0,	9,	0,	0 },
		{ 9,	9,	0,	0 },
		{ 9,	0,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 9,	9,	0,	0 },
		{ 0,	9,	9,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	9,	0,	0 },
		{ 9,	9,	0,	0 },
		{ 9,	0,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 9,	9,	0,	0 },
		{ 0,	9,	9,	0 },


		// SHAPE 2

		{ 0,		0,		0,		0 },
		{ 172,	172,	0,		0 },
		{ 0,		172,	0,		0 },
		{ 0,		172,	0,		0 },

		{ 0,		0,		0,		0 },
		{ 0,		0,		0,		0 },
		{ 172,	172,	172,	0 },
		{ 172,	0,		0,		0 },

		{ 0,		0,		0,		0 },
		{ 172,	0,		0,		0 },
		{ 172,	0,		0,		0 },
		{ 172,	172,	0,		0 },

		{ 0,		0,		0,		0 },
		{ 0,		0,		0,		0 },
		{ 0,		0,		172,	0 },
		{ 172,	172,	172,	0 },


		// SHAPE 3

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 14,	14,	14,	14 },

		{ 14,	0,	0,	0 },
		{ 14,	0,	0,	0 },
		{ 14,	0,	0,	0 },
		{ 14,	0,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 14,	14,	14,	14 },

		{ 14,	0,	0,	0 },
		{ 14,	0,	0,	0 },
		{ 14,	0,	0,	0 },
		{ 14,	0,	0,	0 },


		// SHAPE 4

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 11,	11,	0,	0 },
		{ 11,	11,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 11,	11,	0,	0 },
		{ 11,	11,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 11,	11,	0,	0 },
		{ 11,	11,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 11,	11,	0,	0 },
		{ 11,	11,	0,	0 },


		// SHAPE 5

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 0,	5,	0,	0 },
		{ 5,	5,	5,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	5,	0,	0 },
		{ 5,	5,	0,	0 },
		{ 0,	5,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 5,	5,	5,	0 },
		{ 0,	5,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 5,	0,	0,	0 },
		{ 5,	5,	0,	0 },
		{ 5,	0,	0,	0 },


		// SHAPE 6

		{ 0,	0,	0,	0 },
		{ 10,	0,	0,	0 },
		{ 10,	10,	0,	0 },
		{ 0,	10,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 0,	10,	10,	0 },
		{ 10,	10,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 10,	0,	0,	0 },
		{ 10,	10,	0,	0 },
		{ 0,	10,	0,	0 },

		{ 0,	0,	0,	0 },
		{ 0,	0,	0,	0 },
		{ 0,	10,	10,	0 },
		{ 10,	10,	0,	0 }
	};

	shape::shape( unsigned id )
	:	m_id(id % 7),
		m_rot(0),
		m_shape{
			m_data[16 * m_id + 4 * m_rot],
			m_data[16 * m_id + 4 * m_rot + 1],
			m_data[16 * m_id + 4 * m_rot + 2],
			m_data[16 * m_id + 4 * m_rot + 3]
		}
	{ }

	const uint8_t	*const	*shape::get( void ) const
	{ return m_shape; }

	shape							&shape::rotate( void ) {
		m_rot = (m_rot + 1) % 4;
		new (&m_shape) const uint8_t*[4]{
			m_data[16 * m_id + 4 * m_rot],
			m_data[16 * m_id + 4 * m_rot + 1],
			m_data[16 * m_id + 4 * m_rot + 2],
			m_data[16 * m_id + 4 * m_rot + 3]
		};
		return *this;
	}

}
